# 2 - Build manually for test
name: CD 21 Manual Build
   
on:
  workflow_dispatch:  
#  workflow_run:
#    workflows: [CD 10 Unbound and OpenSSL Build Environement Release]
#    types:
#      - completed

jobs:
  buildvars:
    runs-on: ubuntu-latest
    outputs:
      BUILD_DATE: ${{ steps.IMPORT_BUILDVARS.outputs.BUILD_DATE }}
      BUILD_IMAGE_VERSION: ${{ steps.IMPORT_BUILDVARS.outputs.BUILD_IMAGE_VERSION }}
    
    steps:             
    - name: Checkout source
      uses: actions/checkout@v5
      with:
        persist-credentials: false
    
    - name: Import build variables from buildvars file
      id: IMPORT_BUILDVARS
      run: |
        cat buildvars | grep BUILD_DATE >> $GITHUB_OUTPUT
        cat buildvars | grep LEGO_VERSION >> $GITHUB_OUTPUT
        BUILD_IMAGE_VERSION=$(cat buildvars | grep BUILD_IMAGE_VERSION)
        BUILD_VERSION=$(echo $BUILD_IMAGE_VERSION | cut -d- -f1)

        if [[ $(curl -s https://api.github.com/repos/megavolts/lego_cli/releases | grep "status" | cut -d\" -f4) = 404 ]];
            then
            echo "No release existing"
            cat buildvars | grep BUILD_IMAGE_VERSION >> $GITHUB_OUTPUT
        else
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/megavolts/lego_cli/releases | jq '.[0] | .name' -r | grep -Eo '([0-9]+)(\.?[0-9]+)*' | head -1)

            if [[ $LATEST_RELEASE = $BUILD_IMAGE_VERSION ]];
                then
                echo "Release $BUILD_IMAGE_VERSION already exist. Updated build version with next revisoin"
                BUILD_VERSION=$( $BUILD_IMAGE_VERSION | cut -d- -f1)
                BUILD_REVISION=$( $BUILD_IMAGE_VERSION | cut -d- -f2)
                BUILD_REVISION=$(( $BUILD_REVISION +1 ))
                BUILD_IMAGE_VERSION=$BUILD_VERSION-$BUILD_REVISION
                echo "BUILD_IMAGE_VERSION=$BUILD_IMAGE_VERSION" >> $GITHUB_OUTPUT
            else
              cat buildvars | grep BUILD_IMAGE_VERSION >> $GITHUB_OUTPUT
            fi
        fi

  lego_cli-build: 
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: buildvars
    steps:
      - name: Checkout source
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Dockerhub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Build
        uses: docker/build-push-action@v6
        env:
          DOCKERHUB_SLUG: "megavolts/lego_cli"
        with:
          outputs: type=cacheonly
          platforms: linux/amd64
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            BUILD_DATE=${{ needs.buildvars.outputs.BUILD_DATE }}  
            BUILD_IMAGE_VERSION=${{ needs.buildvars.outputs.BUILD_IMAGE_VERSION }}
          file: ./lego_cli/Dockerfile
          context: ./lego_cli/
          push: ${{ github.event_name != 'pull_request' }}
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:${{ needs.buildvars.outputs.BUILD_IMAGE_VERSION }}   
            ${{ env.DOCKERHUB_SLUG }}:latest
